/*
–ó–∞–¥–∞—á–∞ 1 - Iterator
üìå –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –°—Ç—É–¥–µ–Ω—Ç
üìå –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –£—á–µ–±–Ω–∞—è–ì—Ä—É–ø–ø–∞
üìå –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –£—á–µ–±–Ω–∞—è–ì—Ä—É–ø–ø–∞–ò—Ç–µ—Ä–∞—Ç–æ—Ä, –∑–∞—Å—Ç–∞–≤–∏–≤ –µ–≥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Iterator
üìå –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–∏–µ)

–ó–∞–¥–∞—á–∞ 2 - Iterable
üìå –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –£—á–µ–±–Ω–∞—è–ì—Ä—É–ø–ø–∞, –∑–∞—Å—Ç–∞–≤–∏–≤ –µ–≥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Iterable
üìå –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ iterator() –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–º–∏
–∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
üìå –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –£—á–µ–±–Ω–∞—è–ì—Ä—É–ø–ø–∞–°–µ—Ä–≤–∏—Å, –¥–æ–±–∞–≤–∏–≤ –≤ –Ω–µ–≥–æ –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è
—Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –§–ò–û
üìå –°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –¥–æ–±–∞–≤–∏–≤ –≤ –Ω–µ–≥–æ –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏
–≤—ã–∑—ã–≤–∞—Ç—å –≤ –Ω–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ –£—á–µ–±–Ω–∞—è–ì—Ä—É–ø–ø–∞–°–µ—Ä–≤–∏—Å

–ó–∞–¥–∞—á–∞ 3 - Comparable
üìå –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –°—Ç—É–¥–µ–Ω—Ç, –∑–∞—Å—Ç–∞–≤–∏–≤ –µ–≥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
Comparable
üìå –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç compareTo () —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–æ –∫–∞–∫–æ–º—É-–ª–∏–±–æ
–ø–∞—Ä–∞–º–µ—Ç—Ä—É (–ø—Ä–∏–º–µ—Ä studentId)
üìå –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –£—á–µ–±–Ω–∞—è–ì—Ä—É–ø–ø–∞–°–µ—Ä–≤–∏—Å, –¥–æ–±–∞–≤–∏–≤ –≤ –Ω–µ–≥–æ –º–µ—Ç–æ–¥
—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ id
üìå –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –¥–æ–±–∞–≤–∏–≤ –≤ –Ω–µ–≥–æ –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
—Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ id –∏ –≤—ã–∑—ã–≤–∞—Ç—å –≤ –Ω–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑
–£—á–µ–±–Ω–∞—è–ì—Ä—É–ø–ø–∞–°–µ—Ä–≤–∏—Å
 */
package Task1;

import java.util.*;

public class IteratorMain {
    public static void main(String[] args) {
        StudentGroup studentGroup1 = new StudentGroup();
        StudentGroup studentGroup2 = new StudentGroup();
        StudentGroup studentGroup3 = new StudentGroup();
        StudentGroup studentGroup4 = new StudentGroup();
        StudentGroup studentGroup5 = new StudentGroup();
        StudentGroup studentGroup6 = new StudentGroup();
        Stream studentStream1 = new Stream();
        Stream studentStream2 = new Stream();
        Stream studentStream3 = new Stream();

        Student van = new Student("van", 4);
        Student igor = new Student("Igorechick",1);
        Student alex = new Student("Alex", 2);
        Student alexey = new Student("Alexey", 3);

        studentGroup1.addStudent(111, van);
        studentGroup1.addStudent(111, igor);
        studentGroup1.addStudent(111, alex);
        studentGroup1.addStudent(111, alexey);
        studentGroup2.addStudent(112, van);
        studentGroup2.addStudent(112, alexey);
        studentGroup2.addStudent(112, igor);
        studentGroup3.addStudent(113, van);
        studentGroup3.addStudent(113, van);
        studentGroup4.addStudent(114, van);
        studentGroup4.addStudent(114, igor);
        studentGroup4.addStudent(114, alexey);
        studentGroup4.addStudent(114, alexey);
        studentGroup4.addStudent(114, igor);
        studentGroup5.addStudent(115, alex);
        studentGroup6.addStudent(116, igor);
        studentGroup6.addStudent(116, van);

        studentStream1.addGroup(1, studentGroup1);
        studentStream1.addGroup(1, studentGroup5);
        studentStream2.addGroup(2, studentGroup2);
        studentStream3.addGroup(3, studentGroup3);
        studentStream3.addGroup(3, studentGroup4);
        studentStream3.addGroup(3, studentGroup6);



        ArrayList<StudentGroup> arrayListGroup1 = new ArrayList<>(List.of(studentGroup1));
        System.out.println(arrayListGroup1);
        ArrayList<StudentGroup> arrayListGroup2 = new ArrayList<>(List.of(studentGroup2));
        System.out.println(arrayListGroup2);
        ArrayList<StudentGroup> arrayListGroup3 = new ArrayList<>(List.of(studentGroup3));
        System.out.println(arrayListGroup3);
        ArrayList<StudentGroup> arrayListGroup4 = new ArrayList<>(List.of(studentGroup4));
        System.out.println(arrayListGroup4);
        ArrayList<StudentGroup> arrayListGroup5 = new ArrayList<>(List.of(studentGroup5));
        System.out.println(arrayListGroup5);
        ArrayList<StudentGroup> arrayListGroup6 = new ArrayList<>(List.of(studentGroup6));
        System.out.println(arrayListGroup6);
        System.out.println("***************************************************************");

        ArrayList<Stream> arrayListStream1 = new ArrayList<>(List.of(studentStream1));
        System.out.println(arrayListStream1);
        ArrayList<Stream> arrayListStream2 = new ArrayList<>(List.of(studentStream2));
        System.out.println(arrayListStream2);
        ArrayList<Stream> arrayListStream3 = new ArrayList<>(List.of(studentStream3));
        System.out.println(arrayListStream3);
        System.out.println("***************************************************************");
        ArrayList<Stream> streams = new ArrayList<>(List.of(studentStream1, studentStream2, studentStream3));
        System.out.println(streams);
        System.out.println("***************************************************************");
        Collections.sort(streams, new StreamComparator());
        System.out.println(streams);
        System.out.println("***************************************************************");
        ArrayList<ArrayList<FlytService>> sortStream = new ArrayList<>(streams);
        Collections.sort(sortStream, new StreamComparator());
        System.out.println(sortStream);



//        Iterator<Student> iterator = new StudentGroupIterator(studentGroup);
//
//        while (iterator.hasNext()) {
//            System.out.println(iterator.next());
//        }
//        ArrayList<Student> arrayList = new ArrayList<>(List.of(van, igor, alex, alexey));
//        System.out.println(arrayList);
//        Collections.sort(arrayList);// –º–æ–∂–Ω–æ –º–µ–≥—è—Ç—å –º–µ—Å—Ç–∞–º–∏ o.name.length() - this.name.length() –≤ –º–µ—Ç–æ–¥–µ –∏ –ª–∏ –ø—Ä–∏–º–µ—Ç–∏—Ç—å reversOrder
//        Collections.sort(arrayList, Comparator.reverseOrder());
//        Collections.sort(arrayList, new StudentComparator());
        /*
        public int compare(Student o1, Student o2) {
        return o1.id - o2.id;
        }
         */
//        Collections.sort(arrayList, (s1, s2) -> s1.id - s2.id); // —Ç–æ–∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –≤ –ø—Ä–µ–¥—É–¥—É—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –Ω–æ —á–µ—Ä–µ–∑ –ª—è–º–±–¥–∞
        /*Collections.sort(arrayList, (s1, s2) -> {return s1.id - s2.id;});// —Ç–æ–∂–µ —Å–∞–º–æ–µ*/

//        System.out.println(arrayList);
//
//        for (Student student: studentGroup1) {
//            System.out.println(student);
//        }

    }
}
